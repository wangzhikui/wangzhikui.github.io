{"meta":{"title":"王智魁Allen","subtitle":null,"description":null,"author":"王智魁Allen","url":"http://wushuning.com"},"pages":[{"title":"微信公众号javaweb全栈之路","date":"2018-10-18T12:05:08.330Z","updated":"2018-10-18T12:05:08.330Z","comments":false,"path":"about/index.html","permalink":"http://wushuning.com/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-10-18T12:05:08.330Z","updated":"2018-10-18T12:05:08.330Z","comments":false,"path":"categories/index.html","permalink":"http://wushuning.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-10-18T12:05:08.344Z","updated":"2018-10-18T12:05:08.344Z","comments":true,"path":"links/index.html","permalink":"http://wushuning.com/links/index.html","excerpt":"","text":""},{"title":"前端导航","date":"2018-10-18T12:05:08.345Z","updated":"2018-10-18T12:05:08.345Z","comments":false,"path":"nav/index.html","permalink":"http://wushuning.com/nav/index.html","excerpt":"","text":"导航"},{"title":"标签","date":"2018-10-18T12:05:08.345Z","updated":"2018-10-18T12:05:08.345Z","comments":false,"path":"tags/index.html","permalink":"http://wushuning.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-10-18T12:05:08.345Z","updated":"2018-10-18T12:05:08.345Z","comments":false,"path":"repository/index.html","permalink":"http://wushuning.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo结合gitpage搭建无限空间静态博客","slug":"hexo结合gitpage搭建无限空间静态博客","date":"2018-10-18T16:00:00.000Z","updated":"2018-10-19T08:07:03.141Z","comments":true,"path":"2018/10/19/hexo结合gitpage搭建无限空间静态博客/","link":"","permalink":"http://wushuning.com/2018/10/19/hexo结合gitpage搭建无限空间静态博客/","excerpt":"","text":"什么是HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。生成静态网页即可托管到任何支持静态网页的服务器上。 什么是GitPageGitHub Pages 与GitHub同属一个研发组织，免费为你的GitHub项目提供项目部署和托管服务，一个GitHub账号可以创建一个GitPage空间。GitPage支持静态和markdown语法的项目，并与GitHub上的项目实时同步自动渲染。所以你可以很容易使用GitPage搭建自己的博客。 特别注意：一个GitHub账号只能创建一个GitPage空间，并且名称有特殊要求下文详细说明。 可选框架：jekyll 环境准备12nodejsGit 创建github账号和同名项目 申请账号如:wangzhikui 创建同名项目:wangzhikui.github.io 如图: 进入项目的【setting &gt; GitHub Pages】 如图： 按照描述设置开启即可。 到此为止GitPages已经可以使用，提交到wangzhikui.github.io的静态或markdown形式的文件会自动同步到GitPages空间。可通过http://wangzhikui.github.io访问。 配置域名(无此需要可跳过)一、上一步GitPages设置中设置域名如：wushuning.com二、配置域名的A地址和CNAME别名本域名在阿里云申请，所以登录aliyun.com进入域名配置，域名解析做如下配置 三、项目根目录中添加名为CNAME的文件，内容为 wushuning.com hexo使用安装hexo并使用hexo创建项目安装hexo脚手架工具并使用脚手架创建项目12345npm install hexo-cli -ghexo init wangzhikuiblogcd wangzhikuiblognpm installhexo server 全局安装脚手架hexo-cli 创建一个名为wangzhikuiblog的项目 进入项目目录 安装依赖包 启动服务 服务启动成功出现如下图： 通过http://localhost:4000访问示例程序到此使用hexo创建项目已经完成 手动部署进入项目目录运行命令1hexo g 则会在项目路径中生成一个public文件夹，里边的内容即为hexo为我们生成的所有静态文件。手动将public里边的所有文件git传到wangzhikui.github.io即可。 到此可通过http://wangzhikui.bighub.io或域名（如果配置了）http://wushuning.com访问你的网站。 自动部署打开项目根目录下的_config.yml 找到如下配置:1234deploy: type: git repo: github: git@github.com:wangzhikui/wangzhikui.github.io.git 运行命令1hexo d 则将public下的文件部署到wangzhikui.github.io.git上，我这里只有一个分支master，所以默认，如果要填写分支可以配置repo。建议保持一个分支就可以了。 hexo d 命令push代码使用的是ssh，所以需要配置github的ssh key 关于key生成配置这里不赘述。 注：如果本地要维护两个github账号，这种情况有可能遇到ssh key冲突，该情况在下一篇博文描述 hexo生成的项目目录结构简介使用hexo创建的项目路径如下图： 项目源码 hexo常用命令 命令 简写 描述 hexo server hexo s 启动服务 hexo generate hexo g 生成静态文件 hexo deploy hexo d 将静态文件部署到github上 hexo clean 无 清除缓存文件 (db.json) 和已生成的静态文件 (public) 查看更多命令: hexo 命令大全 本人在部署的时候喜欢使用三个命令组合123hexo cleanhexo ghexo d 使用主题主题文件存放在 /themes下。本博客基于主题hexo-theme-pure 修改而来。大家也可前往hexo 主题库 下载自己需要的主题。 下载主题后放入/thems下 打开项目根目录的配置文件._config.yml.修改配置theme为你主题的文件夹名称即可1theme: hexo-theme-yyy 创建博文通过命令进入项目目录1hexo new test 常见一篇名为test.md的博文，路径在/source/_posts/test.md打开test.md使用markdown编辑即可。 手动创建直接在_posts文件夹下创建一个test.md的文件即可 未完待续 hexo的_config.yml和themes_config.yml分别有哪些重要配置 hexo中博文md文件都有哪些配置 hexo\b中使用gitalk添加评论功能 一个hexo主题\b都包含什么，如何入手修改主题满足自己个性化设置 本地同时维护两个github账号如何设置ssh key","categories":[{"name":"博客","slug":"博客","permalink":"http://wushuning.com/categories/博客/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://wushuning.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://wushuning.com/tags/github/"},{"name":"gitpage","slug":"gitpage","permalink":"http://wushuning.com/tags/gitpage/"}]},{"title":"web全栈技术图谱v1.0","slug":"web全栈技术图谱v1-0","date":"2018-10-17T16:00:00.000Z","updated":"2018-10-19T08:10:15.416Z","comments":true,"path":"2018/10/18/web全栈技术图谱v1-0/","link":"","permalink":"http://wushuning.com/2018/10/18/web全栈技术图谱v1-0/","excerpt":"","text":"根据自己接触到的技术体系整理了一个web全栈技术图谱v1.0。做个记录","categories":[{"name":"技术图谱","slug":"技术图谱","permalink":"http://wushuning.com/categories/技术图谱/"}],"tags":[{"name":"技术图谱","slug":"技术图谱","permalink":"http://wushuning.com/tags/技术图谱/"},{"name":"前端","slug":"前端","permalink":"http://wushuning.com/tags/前端/"}]},{"title":"vue基础教程(使用vue-cli搭建开发环境)","slug":"vue基础教程-使用vue-cli搭建开发环境","date":"2018-10-09T16:00:00.000Z","updated":"2018-10-18T16:10:13.782Z","comments":true,"path":"2018/10/10/vue基础教程-使用vue-cli搭建开发环境/","link":"","permalink":"http://wushuning.com/2018/10/10/vue基础教程-使用vue-cli搭建开发环境/","excerpt":"","text":"vue环境搭建vue cli","categories":[{"name":"vue","slug":"vue","permalink":"http://wushuning.com/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://wushuning.com/tags/vue/"},{"name":"vue-cli","slug":"vue-cli","permalink":"http://wushuning.com/tags/vue-cli/"}]},{"title":"markdown常用语法","slug":"markdown","date":"2018-09-30T16:00:00.000Z","updated":"2018-10-18T12:05:08.329Z","comments":true,"path":"2018/10/01/markdown/","link":"","permalink":"http://wushuning.com/2018/10/01/markdown/","excerpt":"","text":"本文参考 Github markdown 基本写法，更多详细描述可直接前往Github查看 标题文字前使用(1-6个)#，不同数量代表文字不一样大小 标题1标题2标题3标题4标题5标题6123456# 标题1## 标题2### 标题3#### 标题4##### 标题5###### 标题6 文本样式 样式 语法 快捷键 示例 效果 粗体 ** **或__ __ command/control + b **Hello World** Hello World 斜体 * *或_ _ command/control + i *Hello World* Hello World 删除 ~~ ~~ 无 ~~Hello World~~ Hello World 粗体&amp;斜体 ~~ ~~和_ _ 无 **Hello _World_** Hello World 表格源码123456| 样式 | 语法 | 快捷键 | 示例 | 效果 ||:----|:----:|-----:|-----:|----:|| 粗体 | `** **`或`__ __` | command/control + b | `**Hello World**` | **Hello World**|| 斜体 | `* *`或`_ _` | command/control + i | `*Hello World*` | *Hello World* || 删除 | `~~ ~~` | 无 | `~~Hello World~~` | ~~Hello World~~ || 粗体&amp;斜体 | `~~ ~~`和`_ _` | 无 | `**Hello _World_**` | **Hello _World_** | 引用文本使用 &gt;，可以使用多个&gt;来嵌套 被引用的文字 被引用的文字2 被引用的文字3 123&gt; 被引用的文字&gt;&gt; 被引用的文字2&gt;&gt;&gt; 被引用的文字3 引用代码使用如下标志将文字包含即可 12345使用``` ``` 将代码包含即可也可以加上语言来使得块中语法高亮 ``` java ``` javascript ``` html 基础\b格式123git statusgit addgit commit java123public static void main(String[] args)&#123; System.out.print(\"Hello World\")&#125; javascript123function sayHello()&#123; console.log('Hello World')&#125; html123&lt;div&gt; &lt;h1&gt; Hello World &lt;/h1&gt;&lt;/div&gt; Github使用Linguist进行语言检测，并选择第三方语法进行语法突出显示。您可以在YAML文件中找到哪些关键字是有效的。 链接1[友云音](http://yyy.yonyoucloud.com) 友云音 链接可以使用相对地址 语法 目录 / 根目录 ./ 当前目录 ../ 上级目录 1[友云音logo](/images/logo/youyunyin-logo.png) 友云音logo 部分链接当我们写好md发布渲染生成html之后，当鼠标移动到某一块的头部的时候会显示#（也有可能是其他图表），点击之后地址栏会生成一个部分连接。使用该地址栏的地址访问该文章会自动定位到点击的这个块。比如本文的地址是:http://youyunyin.com/2018/10/01/markdown/点击[文本样式]这个标题，地址\b栏url变为http://youyunyin.com/2018/10/01/markdown/#文本样式点击改链接就会直接进入该页面并跳转到[文本样式]块中 列表使用 - 或者 * 第1行 第2行 第2-1行 第2-1-1行 第2-1-2行 第2-2行 第3行 1234567- 第1行- 第2行 - 第2-1行 - 第2-1-1行 - 第2-1-2行 - 第2-2行- 第3行 使用数字 第1行 第2行 第3行 1231. 第1行2. 第2行3. 第3行 任务列表（gihub扩展，非标准markdown） 任务1 任务2 任务3 123- [x] 任务1- [ ] 任务2- [ ] 任务3 段落文字后面输入两个空格换行 图片1![友云音logo](/images/logo/youyunyin-logo.png &quot;友云音logo&quot;) 分割线使用 三个以上 - 或 *1234-------*******","categories":[{"name":"markdown","slug":"markdown","permalink":"http://wushuning.com/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://wushuning.com/tags/markdown/"}]},{"title":"MAC破解安装IntelliJ IDEA方法","slug":"MAC破解安装IntelliJ-IDEA方法","date":"2018-01-10T16:00:00.000Z","updated":"2018-10-18T15:35:58.829Z","comments":true,"path":"2018/01/11/MAC破解安装IntelliJ-IDEA方法/","link":"","permalink":"http://wushuning.com/2018/01/11/MAC破解安装IntelliJ-IDEA方法/","excerpt":"","text":"MAC下破解安装Intellij IDEA 2017 方法破解的版本：12345678IntelliJ IDEA 2017.3.2 (Ultimate Edition) Build #IU-173.4127.27, built on December 26, 2017 Licensed to Rover12421 / Rover12421 You have a perpetual fallback license for this version Subscription is active until December 31, 2099 JRE: 1.8.0_152-release-1024-b8 x86_64 JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o Mac OS X 10.13.2 1、下载IntelliJ IDEA 2017IDEA官网下载无限制版 2、下载破解文件JetbrainsCrack-2.6.2.jar进入下载界面 3、安装IntelliJ IDEA 20174、安装后Applications文件夹中找到IDEA,右键show package contents找到bin目录下，将下载的\b破解文件拷贝到该目录下 5、打开上图中的idea.vmoptions追加如下配置1-javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/JetbrainsCrack-2.6.10-release-enc.jar 6、启动IDEA 提示需要注册，将获取的注册码填入Help &gt; Register选中Activation code 将注册码填入下面的输入框中即可","categories":[{"name":"idea","slug":"idea","permalink":"http://wushuning.com/categories/idea/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://wushuning.com/tags/idea/"}]},{"title":"Java性能调优的11个实用技巧","slug":"Java性能调优的11个实用技巧","date":"2017-11-23T16:00:00.000Z","updated":"2018-10-18T15:26:52.084Z","comments":true,"path":"2017/11/24/Java性能调优的11个实用技巧/","link":"","permalink":"http://wushuning.com/2017/11/24/Java性能调优的11个实用技巧/","excerpt":"","text":"作者：ITeye来源：ITeye[http://www.iteye.com/news/32754] 大多数开发人员认为性能优化是个比较复杂的问题，需要大量的经验和知识。是的，这并不没有错。诚然，优化应用程序以获得最好的性能并不是一件容易的事情，但这并不意味着你在没有获得这些经验和知识之前就不能做任何事。下面有几个很容易遵循的建议和最佳实践能够帮你创建一个性能良好的应用程序。 这些建议中的大多数都是基于Java的，但是也不一定，也有一些是可以应用于所有的应用程序和编程语言的。在我们分享基于Java的性能调优技巧之前，让我们先讨论一下这些通用的性能调优技巧。 1.在必要之前，先不要优化这可能是最最重要的性能调优技巧之一。你应该遵循常见的最佳实践，并尝试有效地实现你的用例。但这并不意味着在证明它是必要之前，替换任何标准库或构建复杂的优化。 在大多数情况下，过早的优化占用了大量的时间，使得代码难以读取和维护。更糟糕的是，这些优化通常不会带来任何好处，因为你花费了大量时间来优化应用程序的非关键部分。 那么，你如何证明你需要优化某些东西呢? 首先，你需要确定应用程序代码的速度，例如，为所有API调用指定一个最大响应时间，或者指定在特定时间范围内导入的记录数量。完成之后，你可以度量应用程序的哪些部分太慢而需要改进。当这样做之后，那么请继续看第二个调优技巧。 2.使用分析器来找到真正的瓶颈在你遵循第一条建议，并确定你的应用程序的某些部分的确需要改进之后，问自己从哪里开始? 你可以用两种方法来解决这个问题: 你可以看一下你的代码，从看起来可疑或者你觉得它可能会产生问题的部分开始。或者使用分析器，获取代码中每个部分的行为和性能的详细信息。至于为什么应该总是遵循第二种方法。 答案应该很明显，基于分析器的方法能让你更好地理解代码的性能含义，并允许你关注最关键的部分。如果你曾经使用过分析器，你将会惊讶于代码的哪些部分造成了性能问题。然而，很多时候，你的第一次猜想会把你引向错误的方向。 3 .为整个应用程序创建性能测试套件这是另一个帮助你避免许多意想不到问题的一般技巧，这些问题通常发生在性能改进部署到生产环境之后。你应该经常定义测试整个应用程序的性能测试套件，并在你完成性能改进之前和之后运行它。 这些额外的测试运行将帮助你识别更改的功能和性能方面的影响，并确保你不会发布一个弊大于利的更新。如果你的任务运行于应用程序的多个不同部分比如数据库或缓存，这一点尤其重要。 4.首先解决最大的瓶颈问题在创建了测试套件并使用分析器对应用程序进行分析之后，你就有了一个需要提高性能的问题列表，这很好，但它仍然不能回答你应该从哪里开始的问题。你可以从那些可以快速搞定的开始，亦或者从最重要的问题开始。 当然前者很诱人，因为这很快就能出结果。有时，可能需要说服其他团队成员或你的管理层，性能分析是值得的。 但总的来说，我建议首先着手处理最重要的性能问题。这将为你提供最大的性能改进，而且你可能只需要修复这些问题中的几个就可以解决你的性能需求。 在了解通用性能调优技巧之后，让我们再来仔细看看一些特定于Java的调优技巧。 5.使用StringBuilder以编程方式连接字符串在Java中有许多不同的连接字符串的选项。例如，可以使用一个简单的+或+ =、老的StringBuffer或StringBuilder。 那么，你应该选择哪种方法呢? 答案取决于连接字符串的代码。如果你以编程方式向字符串中添加新内容，例如，在for循环中，你应该使用StringBuilder。它比StringBuffer更容易使用和提供更好的性能。但是请记住，StringBuilder与StringBuffer不同，它不是线程安全的，而且可能不适合所有用例。 你只需要实例化一个新的StringBuilder，并调用append方法在字符串中添加一个新的部分。当你添加了所有的部分后，可以调用toString()方法来检索连接字符串。 下面的代码片段展示了一个简单的示例。在每次迭代过程中，这个循环将i转换成一个字符串，并将其添加到StringBuilder sb的空间中，因此到最后，这段代码写入“this is test0123456789”到日志文件。 123456StringBuilder sb = new StringBuilder(“This is a test”); for (int i=0; i&lt;10; i++) &#123; sb.append(i); sb.append(” “); &#125; log.info(sb.toString()); 正如在代码片段中看到的，你可以为构造函数方法提供字符串的第一个元素。这将创建一个新的StringBuilder，其中包含提供的字符串和16个额外字符的容量。当你向StringBuilder中添加更多字符时，JVM将动态地改变StringBuilder的大小。 如果你已经知道自己的字符串包含多少字符，那么你可以向不同的构造函数方法提供这个数字，以实例化一个具有被定义容量的StringBuilder。这进一步提高了它的效率，因为它不需要动态扩展它的容量。 6.在声明中使用+连接字符串当你在Java中实现第一个应用程序时，可能有人告诉你不应该用＋来连接字符串。如果在应用程序逻辑中连接字符串这是正确的。字符串是不可变的，每个字符串连接的结果存储在一个新的字符串对象中。这需要额外的内存，并降低应用程序的速度，特别是在循环中连接多个字符串时。 在这些情况下，你应该遵循tip 5并使用StringBuilder。 但如果你只是将一个字符串分解成多行来提高代码的可读性，那就不是这样了。 123Query q = em.createQuery(“SELECT a.id, a.firstName, a.lastName ” + “FROM Author a ” + “WHERE a.id = :id”); 在这些情况下，你应该用一个简单的+来连接你的字符串。Java编译器将优化它并在编译时执行连接。因此，在运行时，代码只使用1个字符，不需要连接。 7.尽可能使用基本数据类型另一种避免开销，提高应用程序性能的快速方法就是使用原始数据类型而不是它们的包装类。因此，最好是使用int而不是Integer，或者是double而不是Double。这将让JVM将值存储在堆栈中，以减少内存消耗，并更有效地处理它。 8.尽量避免BigInteger和BigDecimal由于我们已经讨论了数据类型，我们再来看下BigInteger和BigDecimal。尤其是后者，由于其精度高而受欢迎。但这是有代价的。BigInteger和BigDecimal比简单的long或double需要更多的内存，并且大大降低所有的计算速度。因此，如果你需要额外的精度，或者你的数字超过了一个long范围，最好三思而后行。这可能是你在提升性能问题中唯一需要更改的地方，特别是当你正在实现一个数学算法。 9.首先检查当前日志级别这个建议是显而易见的，但不幸的是，你会发现许多代码忽略它。在创建调试消息之前，应该先检查当前日志级别。 这里有两个例子来说明你不应该这样做。 1234// don’t do this log.debug(“User [” + userName + “] called method X with [” + i + “]”); // or this log.debug(String.format(“User [%s] called method X with [%d]”, userName, i)); 在这两种情况下，你将执行所有需要的步骤来创建日志消息，而不知道日志框架是否使用日志消息。在创建调试消息之前，最好先检查当前日志级别。 1234// do this if (log.isDebugEnabled()) &#123; log.debug(“User [” + userName + “] called method X with [” + i + “]”); &#125; 10.使用Apache Commons StringUtils.Replace 代替String.replace一般来说,String.replace 方法工作得很好，而且非常高效，特别是如果你使用的是Java 9。但是，如果应用程序需要大量的替换操作，并且你还没有更新到最新的Java版本，那么检查更快和更有效的替代方案仍然是有意义的。 一个候选就是 Apache Commons Lang’s StringUtils.replace 方法。正如Lukas Eder在他最近的一篇博客文章中所描述的那样，它大大超过了Java 8的String.replace 方法。 它只需要很小的改变。你只需要为Apache’s Commons Lang 项目增加一个Maven依赖项到你的应用pom.xml，并用StringUtils.replace方法替换所有String.replace方法的调用。 1234// replace this test.replace(“test”, “simple test”); // with this StringUtils.replace(test, “test”, “simple test”); 11.缓存昂贵的资源，比如数据库连接缓存是一种流行的解决方案来避免重复执行昂贵或频繁使用的代码片段。一般的想法很简单:重复使用这些资源比一次又一次地创建一个新的资源要便宜得多。 一个典型的例子就是在池中缓存数据库连接。创建新连接需要时间，如果重用现有连接，则可以避免。 还可以在Java语言本身中找到其他示例。例如，Integer类的valueOf方法缓存了- 128和127之间的值。你可能会说，创建一个新整数并不太贵，但它经常使用，缓存最常用的值提供了性能方面的好处。 但当你考虑缓存时，请记住，缓存实现也会产生开销。你需要花费额外的内存来存储可重用资源，因此可能需要管理你的缓存，以使资源能够访问或删除过时的资源。 因此，在你开始缓存任何资源之前，请确保是经常使用。 总结正如你所看到的，提高应用程序的性能有时不需要做大量的工作。这篇文章中的大多数建议，其实只需要稍微的努力就可以将它们应用到代码中。 但通常最重要的建议是很编程语言无关的: 在你知道有必要之前，不要优化 使用分析器来找到真正的瓶颈 首先解决最大的瓶颈问题","categories":[{"name":"java","slug":"java","permalink":"http://wushuning.com/categories/java/"}],"tags":[{"name":"java性能","slug":"java性能","permalink":"http://wushuning.com/tags/java性能/"}]},{"title":"SpringBoot入门环境搭建，maven构建，Intellij IDEA 2016.2","slug":"SpringBoot入门环境搭建，maven构建，Intellij-IDEA-2016-2","date":"2017-11-23T16:00:00.000Z","updated":"2018-10-18T15:37:58.338Z","comments":true,"path":"2017/11/24/SpringBoot入门环境搭建，maven构建，Intellij-IDEA-2016-2/","link":"","permalink":"http://wushuning.com/2017/11/24/SpringBoot入门环境搭建，maven构建，Intellij-IDEA-2016-2/","excerpt":"","text":"Intellij IDEA工具下搭建SpringBoot入门程序使用maven环境准备 Intellij IDEA 2016.2 maven 3.0.5 SpringBoot 1.5.8 步骤一、新建项目file-&gt;new-&gt;project创建项目选择maven如下图点击next如图填入自己项目的信息，由于是创建的maven项目，所以此处填写maven需要的字段信息，具体见途中说明点击next这一步填写项目的名称和存储的路径点击finish创建成功到这一步一个简单的maven工程就创建完成了。 二、添加springboot支持pom.xml文件中增加配置123456789101112131415161718192021222324252627282930313233343536373839404142&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.8.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 由于最终要打包成jar格式所以pom.xml中还需增加配置1234&lt;groupId&gt;com.wzk&lt;/groupId&gt;&lt;artifactId&gt;spring02&lt;/artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt; 注意:jar参数的值为:jar 三、编写测试代码创建类如下，SpringBoot的启动类，如果不做任何配置，默认启动的容器是tomcat12345678910111213package com.wzk.ms;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringbootApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringbootApplication.class, args); &#125;&#125; 再写一个自己的controller类，输入经典的helloworld123456789101112131415package com.wzk.ms;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloWorldController &#123; @RequestMapping(\"/hello\") public String index() &#123; String test = \"Hello\"; String test1 = \" world\"; String returnStr = test + test1; return returnStr; &#125;&#125; 四、启动测试 SpringbootApplication是一个含有main方法的java程序，所以直接运行 浏览器输入http://localhost:8080/hello因为默认是tomcat所以端口默认8080，返回Hello world. 五、配置修改springboot的配置很简单，直接修改resource下的application.properties文件即可。如修改访问端口为8081，添加配置server.port=8081 tomcat的其他配置可以参考server.port=808112345678910111213#server.address= # bind to a specific NIC#server.session-timeout= # session timeout in seconds#the context path, defaults to &apos;/&apos;#server.context-path=/spring-boot#server.servlet-path= # the servlet path, defaults to &apos;/&apos;#server.tomcat.access-log-pattern= # log pattern of the access log#server.tomcat.access-log-enabled=false # is access logging enabled#server.tomcat.protocol-header=x-forwarded-proto # ssl forward headers#server.tomcat.remote-ip-header=x-forwarded-for#server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)#server.tomcat.background-processor-delay=30; # in seconds#server.tomcat.max-threads = 0 # number of threads in protocol handler#server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding 六、打包成jar打包成可运行的jarintelliJ打开命令行，运行mvn clean package即可默认输出到target目录下，然后输入java -jar xxx.jar即可启动关闭命令行窗口即关闭了容器","categories":[{"name":"springboot","slug":"springboot","permalink":"http://wushuning.com/categories/springboot/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://wushuning.com/tags/springboot/"}]},{"title":"SpringBoot无法启动，启动后报404错误","slug":"SpringBoot无法启动，启动后报404错误","date":"2017-11-23T16:00:00.000Z","updated":"2018-10-18T15:20:02.836Z","comments":true,"path":"2017/11/24/SpringBoot无法启动，启动后报404错误/","link":"","permalink":"http://wushuning.com/2017/11/24/SpringBoot无法启动，启动后报404错误/","excerpt":"","text":"SpringBoot无法启动可能的原因：直接将启动类放在了src.java.main下解决方案：在main下创建自己的packadge如:src.java.main.com.wzk.starter SpringBoot正常启动，但是访问的时候提示404原因是：controller没有被spring容器扫描到解决方案1：spring boot默认扫描启动类的当前包和下级包比如：启动类在 com.wzk.starter包下，那么spring 会扫描 com.wzk.starter和com.wzk.starter.*如果编写的controller没有放置在这些位置就是报错 解决方案2：配置spring boot的扫描路径在启动类上面添加注解：@ComponentScan(basePackages = {“com.wzk.*”})","categories":[{"name":"springboot","slug":"springboot","permalink":"http://wushuning.com/categories/springboot/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://wushuning.com/tags/springboot/"}]},{"title":"猫-森林-纪念","slug":"纪念爱猫森林","date":"2017-10-25T16:00:00.000Z","updated":"2018-10-18T15:18:39.815Z","comments":true,"path":"2017/10/26/纪念爱猫森林/","link":"","permalink":"http://wushuning.com/2017/10/26/纪念爱猫森林/","excerpt":"","text":"2015-4-18号","categories":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/categories/人生/"}],"tags":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/tags/人生/"}]},{"title":"设计模式-极简笔记-6大设计原则","slug":"设计模式-极简笔记-6大设计原则","date":"2017-10-12T16:00:00.000Z","updated":"2018-10-18T15:16:19.155Z","comments":true,"path":"2017/10/13/设计模式-极简笔记-6大设计原则/","link":"","permalink":"http://wushuning.com/2017/10/13/设计模式-极简笔记-6大设计原则/","excerpt":"","text":"通过尽量少的语言描述设计模式的相关概念如果想要更详细的描述可参看设计模式其他相关书籍或者资料 6大设计原则单一职责原则英文名称：Single Responsibiity Principle 简称：SRP定义：在定义接口的时候，接口的功能要单一。该原则素来有很多的争议，因为这个原则在实际开发过程中很难界定功能范围，所以需要根据实际情况使用，不要生搬硬套。 里氏替换原则英文名称：Liskov Substitution Principle 简称：LSP通俗定义：只要父类能出现的地方子类就可以出现，而且替换为子类不会产生任何错误或异常该原则主要为继承定义一个规范，子类尽量不要出现父类不存在的方法或属性 依赖倒置原则英文名称：Dependence Inversion Principle 简称：DIP通俗定义：通常依赖都是指的具体实现类的依赖和耦合，这里倒置就是要把依赖放到接口层。具体的实现类之间不存在依赖，实现类只是依赖他们的接口。该原则就是经常谈到的面向接口编程 接口隔离原则英文名称：Interface Segregation Principle 简称：ISP通俗定义：客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。该原则规范了我们对外提供接口时的一个规范，对外提供接口时，只提供需要的接口。比如：提供通过姓名查询用户信息的接口，就提供queryByName(String name),而不是提供一个通用query(String queryParam)，约定参数为{“name”:张三}这样的形式。 迪米特法则英文名称：Law of Demeter 简称：LOD或英文名称：Least Knowledge Principle 简称：LKP本人喜欢第二个描述。通俗定义：一个类再调用其他类或者接口的时候应该对该类有最少的了解，只要知道该接口能实现什么功能即可，至于如何实现，以及过程都不需要关心。 开闭原则英文名称：Open Closed Principle 简称：OCP通俗定义：一个接口，类，模块的定义应该对扩展开放，对修改关闭该原则规范我们在开发过程中尽量通过扩展的方式来实现新的功能或者变化，而不是去修改原有逻辑或者接口","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://wushuning.com/categories/设计模式/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://wushuning.com/tags/设计模式/"}]},{"title":"子类与父类,向上转型与向下转型","slug":"子类与父类-向上转型与向下转型","date":"2017-10-11T16:00:00.000Z","updated":"2018-10-18T15:38:31.741Z","comments":true,"path":"2017/10/12/子类与父类-向上转型与向下转型/","link":"","permalink":"http://wushuning.com/2017/10/12/子类与父类-向上转型与向下转型/","excerpt":"","text":"作者：本人来源：原创 定义向上转型：子类赋给父类向下转型：父类赋给子类（必须是父引用本身已经指向子类对象的情况，并且要加子类强制转换，否则报错） 12345678910111213141516171819202122232425262728public class Super &#123; public name = \"父类\"; public void MyName()&#123; System.out.println(\"名字：\"+name); &#125;&#125;public class Sub extends Super&#123; public name = \"子类\"; public void MyName()&#123; System.out.println(\"名字：\"+name); &#125;&#125;public Class Test&#123; public static void main(String args[])&#123; Super super = new Sub();//向上转型 Sub sub = (Sub)super;//向下转型，且super指向子类对象 //注属性不会覆写，super是父类型引用所以指向的属性是父类型属性 super.MyName();//输出：名字：父类 sub.MyName();//输出：名字：子类 //super_1指向的是父类型，强制转换的时候出错 Super super_1 = new Super(); Sub sub_1 = (Sub)super_1;//编译错误，ClassCaseException &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://wushuning.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://wushuning.com/tags/java/"}]},{"title":"一个程序员跑了几千公里到戈壁徒步70KM完--感悟","slug":"一个程序员跑了几千公里到戈壁徒步70KM-完","date":"2017-10-09T16:00:00.000Z","updated":"2018-10-18T15:23:58.759Z","comments":true,"path":"2017/10/10/一个程序员跑了几千公里到戈壁徒步70KM-完/","link":"","permalink":"http://wushuning.com/2017/10/10/一个程序员跑了几千公里到戈壁徒步70KM-完/","excerpt":"","text":"概述从五月份的医疗行业沙漠徒步挑战赛到10.1的戈壁挑战赛跟随一个初创团队，感受创业过程感悟颇多作为组委会裁判，IT中心负责人，中控台操盘手…很遗憾，以后应该不会再继续参与了，具体原因不想缀述。到可以用一个小寓言表达：一个水桶能装多少水是由最短那跟木板决定的。 创业真的需要：一个灵魂人物+靠谱的团队+能力的均等创业不是救助，没人可怜你，没人教你，所有东西都要自己悟。创业也不是小孩过家家，专业是唯一标准也多少明白了华为事件：“辞退你与能力无关”。 感悟-态度态度是，一个靠谱的人永远比一个有能力缺不靠谱的人受欢迎。 感悟-情商听很重要，听别人说了什么，听别人没说什么，听自己想说什么，听自己说正确了多少。说很重要，说要看场合，看人，看场景，要思而后说，很多人讲话不经过大脑。悟很重要，交流是一门艺术，多思多想多悟，想不明白就闭嘴少说话。言多必失。 感悟-信仰很多人都说中国人没有信仰，不能全否定，但至少绝大多数是没有的人一定要有信仰，信仰决定你对人生的态度，决定你的朋友圈，以及你的家庭人要有自己坚持的东西。 结语要加入比自己优秀的圈子，这样你才能更优秀，至少不能比自己差要加入\b比自己聪明的圈子，这样你能更聪明，至少不能比自己笨要加入与自己情商匹配或更高的圈子，与这些人共事是一种享受当你发现自己开始于身边的人格格不入的时候就要好好想想，是自己退步了，还是已经超越了大部分人如果是前者毫无疑问赶紧追上，如果是后者，则需要考虑继续往上一个阶层，或者换个环境。比你优秀的人很多，要善于发现，不要在比你差的人身上耗费太多精力，否则你只会跟他一样。","categories":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/categories/人生/"}],"tags":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/tags/人生/"}]},{"title":"一个程序员跑了几千公里到戈壁徒步70KM","slug":"一个程序员跑了几千公里到戈壁徒步70KM","date":"2017-10-03T16:00:00.000Z","updated":"2018-10-18T15:13:47.873Z","comments":true,"path":"2017/10/04/一个程序员跑了几千公里到戈壁徒步70KM/","link":"","permalink":"http://wushuning.com/2017/10/04/一个程序员跑了几千公里到戈壁徒步70KM/","excerpt":"","text":"10月5日-10月7日，三天70+km徒步，敦煌，戈壁。从北京-到敦煌 这一串描述很难跟一个程序员想到一起，有时候自己想来也很疯狂。 慢慢的发现自己有些改变，不太发微信状态，不发微博，不看qq 更多的是看看书，看看新闻，看看网上分享的技术文档，上知乎，csdn回答一些技术问题 闲暇时间开始重新写一写东西。 生活中开始参与非IT相关的领域的活动 本人并非什么技术狂人，也不是编程技术的狂热爱好者，工作久了，也尝试拓宽自己的视角，接触不一样的人，不一样的事。 久了，也懂得了很多，比如情怀这个东西，我们知道锤子一直在玩情怀，我们提到锤子也总在说情怀，可是你懂情怀是什么吗？用情怀是一种什么感受？其实很遥远。 但是当你身边出现这么一群人，因为情怀，因为梦想去做一件事情的时候，这种感觉是没法形容的。很幸运我碰到了这么一位。也有幸参与其中一部分。","categories":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/categories/人生/"}],"tags":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/tags/人生/"}]},{"title":"mac中配置eclipse启动使用的jdk，eclipse.ini文件","slug":"mac中配置eclipse启动使用的jdk，eclipse-ini文件","date":"2017-09-23T16:00:00.000Z","updated":"2018-10-18T15:31:24.816Z","comments":true,"path":"2017/09/24/mac中配置eclipse启动使用的jdk，eclipse-ini文件/","link":"","permalink":"http://wushuning.com/2017/09/24/mac中配置eclipse启动使用的jdk，eclipse-ini文件/","excerpt":"","text":"设置eclipse使用的jdk application中找到eclipse右键show content找到eclipse的配置文件eclipse.ini 增加配置如下 12-vm/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home 其中jdk的路径可以通过命令1/usr/libexec/java_home -V 最后是大写的V查看","categories":[{"name":"eclipse","slug":"eclipse","permalink":"http://wushuning.com/categories/eclipse/"}],"tags":[{"name":"eclipse","slug":"eclipse","permalink":"http://wushuning.com/tags/eclipse/"}]},{"title":"mac中JDK安装配置","slug":"mac中JDK安装配置","date":"2017-09-23T16:00:00.000Z","updated":"2018-10-18T15:29:08.469Z","comments":true,"path":"2017/09/24/mac中JDK安装配置/","link":"","permalink":"http://wushuning.com/2017/09/24/mac中JDK安装配置/","excerpt":"","text":"系统内置JDKmac默认自带一个jdk6 自定义安装JDK从oracle下载jdk安装后默认安装路径如下1/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home 并且系统内置的jdk会默认为最新安装的 环境变量配置vi .bash_profile输入：1234export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Homeexport CLASSPAHT=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH:export PATH 删除已经安装的jdk1sudo rm -rf jdk1.8.0_101.jdk 可以进入12cd /usr/libexecjava_home -V 查看所有jdk的路径1/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home","categories":[{"name":"java","slug":"java","permalink":"http://wushuning.com/categories/java/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://wushuning.com/tags/mac/"},{"name":"java","slug":"java","permalink":"http://wushuning.com/tags/java/"}]},{"title":"校招是怎样一种体验，应届程序员如何准备校招？","slug":"校招是怎样一种体验，应届程序员如何准备校招","date":"2017-09-18T16:00:00.000Z","updated":"2018-10-18T15:13:55.089Z","comments":true,"path":"2017/09/19/校招是怎样一种体验，应届程序员如何准备校招/","link":"","permalink":"http://wushuning.com/2017/09/19/校招是怎样一种体验，应届程序员如何准备校招/","excerpt":"","text":"很久没写东西，也很久没整理，难得有时间清闲一下，坐下来记录一下最近的经历。 9月是开学季，也是校园招聘开始的季节，这次公司的校招比较提前，以往都是到了10月份才来，领导商量决定早点来以免被别的公司刷了一轮，剩下的都是质量不太好的。想想也有一定的道理。 这次被集团选为面试官，去山东，山西两站，社招面了很多，校招还是头次，多少有些期待。 写下这些文字的时候已是结束了山东，正在山西境内。山东大学的学生整体还是不错的，人都比较低调，少有特别个性的，最终发了不少offer，本人也遇到一个比较满意的想招到自己部门的学生，更巧的是还是老乡。但是遗憾的是没有遇到特别优秀让人特别兴奋的学生，唯一想要给高潜的就是这位老乡（此处没有个人感情色彩）。 从面试官的角度看。对于面试的同学还真是有些建议1，首先就是准备，现在的学生极个别的会去准备一些面试经验，其他的就是看缘分，虽然面试问的题目很多都有面经，有的学生也不屑去看，认为只要真实表达自己就可以了，这个其实是错误的，一些基础的东西久了没用可能会忘记，时不时的还是要复习一下，就像到现在本人闲着没事还会去看看java基础类型，java各种集合类的集成关系，源码，各类讲解多线程的文章。而且现在资料好找看起来很方便。 2，准备痕迹过于浓厚，有些同学确实准备了，但是为了面试而面试，而且非常实在的说自己就是刷题，这真的是无语，你那么诚实的告诉我了，我就只能诚实的让你不过了。 3，说话的艺术，平时说的少，面试的时候密集的沟通交流，很多学生就有点慌，害怕冷场就一个劲的说，问题刚问完就接着回答，也不多想，讲了很多一句重点都没有，这个其实是很吃亏的，说多错多这句真理不信不行。 4，简历，这个是真的要花很多心思准备，对于应届生来讲，本身没有太多的项目经验，而面试官能了解这个人的第一印象就是简历，从简历上看出你这个人在学校学习怎样，是不是一个会主动动手写代码的人，是不是一个会主动接触新技术的人。有人会疑问，很多东西我只是看了一些但是完全没用过或者没写过可以写吗。我的回答是当然可以，这要看你的写法，你要写精通，那准备死就行了，你要写熟悉，可能也会被问死，但是你可以说自己正在研究哪一个方向，正在看哪一些技术栈等等。这样至少能看出你的兴趣点和规划。 5，自我介绍，不知道现在是不流行自我介绍了吗？还是不关注，大部分人就三句话，我是谁，哪个学院，本科还是硕士，多一点的就是主要学的课程，再多一点就是做了一些什么项目。其实我觉得这个还是要多准备一下，至少要30s吧，其实这个过程是给面试官再详细看一下你的建立，也避免冷场吧。既然是技术，可以多介绍一下自己的技术特长，爱好的方向，平时喜欢做点什么研究等等。至少不要让人感觉你什么也没准备。 6，关于项目，面试中本人比较喜欢问简历上做过的项目，至于为什么这里讲一下，如果简历上没有什么项目，或者描述极其简单，那么自然就是去问一些java底层实现，说实话，java知识体系如此庞大，运气不好问的问题一个答不上。如果有项目经历的话很多时候都会聊项目怎么实现，做了什么功能，用了什么技术栈，遇到什么问题，如何解决的等等，只要稍微准备一下就能很好回答。有人就说了假如没有项目经历怎么办，这个时候我只想说难道你在大学就从来没有做过学生管理系统。。。。。（对不起这是个冷笑话） 7，关于项目，一定要描述清楚项目的功能，以及你做的功能，还有就是用到了什么技术栈。同时对于项目要充分准备。有的同学被问到项目的时候回答很随意：其实即使做了一些的crud，没有太复杂。我只想说既然啥都没有你写上干嘛，你自己都瞧不上难道要我觉得你的项目很厉害。 8，穿着，不知道是不是大环境就是这样，大家都不注意自己的穿着，这里讲的不是西装领带，你这样穿反而不好，而是干净整洁并且要像一个工作者，平时怎么穿面试怎么穿多少有点随意，至少要发型整洁，上衣素净，长裤，皮鞋或者稍微正式的休闲鞋。至少不要印花T恤短裤，休闲网鞋，搭配上也合理。程序员毕竟不是屌丝，虽然很多人都自嘲屌丝程序员，那都是无能的无奈，程序员，高端技术人士，不管别人怎么看我们的职业，至少我们自己要尊重。 零零洒洒写了这么多，这次来感触很深，本人不太爱说话，尤其是人多的时候，多半一个人带着，不断的回想与每一个人的交谈，也在发觉自己的不足，也希望这些文字能被一些同学看到，多少有些帮助吧。","categories":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/categories/人生/"}],"tags":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/tags/人生/"}]},{"title":"跟谁一起工作，到底有多重要？","slug":"跟谁一起工作到底有多重要","date":"2017-02-22T16:00:00.000Z","updated":"2018-10-18T15:24:15.125Z","comments":true,"path":"2017/02/23/跟谁一起工作到底有多重要/","link":"","permalink":"http://wushuning.com/2017/02/23/跟谁一起工作到底有多重要/","excerpt":"","text":"作者：孙圈圈来源：圈外（iquanwai） 《浪潮之巅》的作者吴军，在《得到》专栏里，提及了 Google 刚进中国时候的一件事。刚开始，Google 总部对中国研发团队的评价非常低，因为“出工不出活儿”，北京的三四个工程师都抵不上 Google 总部的一个工程师。 后来吴军帮忙分析了原因，他发现，那些工程师都不善于找到最重要的工作并优先完成它们。中国研发团队里，所有的工程师都是新人，没有人告诉他们该如何工作，而在 Google 总部，新员工只是一小部分，所以很容易在有经验的员工带动下快速掌握工作技能。 之后两年，Google 总部的工程师陆续来中国帮助团队梳理工作方式，而中国团队也会去 Google 总部交流，这种情况就得到了改善，中国研发团队也最终得到了总部的认可。 Google 工程师这么聪明的一群人，尚且需要学习正确的工作方式，才能有效产出，何况大多数人？ 我们一直都认为，如果一个人智商情商正常、学习和工作意愿高，就一定能出成绩。 然而，我带过很多人，也招过很多人，却发现一个奇怪的现象：有一些人，十分有意愿学习，非常努力，智商情商也都正常，然而工作产出却非常低，甚至不如很多资质低于他们的人。 我一直百思不得其解，一度怀疑自己看人不准。直到前阵子看到吴军的这段叙述，才幡然醒悟，仔细回想了这些人的工作方式，将他们与产出高的人相比，发现他们无一例外都存在这三个问题： 问题 1：只关注任务，不关注目标 假如你的老板正在飞机上，还有 1 小时落地，下来之后需要给客户做一个重要汇报，而你需要给他做一份 PPT。但因为你错估了时间，导致 PPT 草草做完，而且发现其中一些数据没有，你怎么办？ 低效人士的做法是：疯狂地找数据，最后可能数据有了，然而 PPT 没有来得及做完，或者质量不高。 一般人的做法是：找人帮自己一起找数据。 而最高效的那些人，会根据老板此次汇报的目的，判断这些数据在其中的作用大小，如果作用不大，那么就把时间花在完善重要页数、而不是找数据上，如果很关键，那么就找其他人帮忙，或者找一些替代数据。 这三类人之间的差距，其实就是任务导向与目标导向的差距。 我此前的咨询公司，在做高潜人才研究的时候，有个发现：高潜力的人才是有共性的，具备这些共性的人，几乎做什么都能做好，而不具备的，几乎做任何工作都会障碍重重。 这其中，有一项共性就是 Result-driven （结果驱动）。那些高产出的人，未必动作更快，而是更善于判断，什么事情对结果是最有效的，然后，用尽一切办法保证结果达成，而不是死守着原有的工作任务。 实际上，结果驱动不仅仅是一种工作习惯，更是一种思维方式。这种以终为始的思维模式，是我自己刻意训练的最有用的思维模式之一。 比如思维训练营里，有学员问我：如何让自己对一个行业有真知灼见？ 想想看，如果是你，会如何回答？ 我的回答方式，是反问她：具备真知灼见的目的是什么呢？是想让客户更加信任你、还是想让老板看到你的进步？ 假设你是希望客户信任你，觉得你懂他，那你要做的，就是看这个行业里的客户有什么痛点，然后针对这几个痛点，下功夫研究和分析，有更多洞见，然后借机沟通出去。了解一个行业，是一个太大的话题，没有目标，根本无从下手。 所以，没有结果驱动的思维，而仅仅死守着工作任务，最终就是，出工不出活儿。 问题 2：应激式工作，而非统筹式工作 如果你观察周围的同事，会发现，整天风风火火、急得上蹿下跳、各种任务来回切换的人，有时候产出并不高。看他们工作，就好像打地鼠一样，打完一个，另一个又冒上来，连看的人都跟着焦虑起来。 而另一类人，他们做事专注、条理清晰、看起来很淡定，但最后，多困难的事儿都默默搞定了。 两者的差别就在于，第一类人总是应激式工作。他们每天起来的第一件事，不是规划当天的工作，而是马上投入工作，以至于到了下班之后，发现还有很多事情没做完，而没做完的，可能又是最重要的。 另外，领导临时给个任务、客户临时有个要求、同事临时要个数据，他们都会停下手里的事情，去忙这些，最终，在任务的切换上花费了巨大的精力。 我跟公司的运营打过一个比方：假设你每项工作任务平均半小时可以做完，而任务之间的切换通常也要半小时，如果你经常一项不做完就切换到下一项，就算每个任务中途切换一次吧，那就意味着，8 小时的工作时间，你至少有 4 小时都花在任务切换上了。 这种应激式工作方式无疑是低效的，那什么才是高效的呢？统筹式工作。 真正的统筹式工作，有几个特征： ● 特征一，有计划地工作。 我通常周日晚上就会排好下周每天的工作，而每天早上会排好当天的工作。而且，任务清单在工作的时候一直开着、实时更新，完成一项删掉一项，临时增加一项就插入相应的时间段，当天完不成的、非紧急的任务，我就改成第二天的日期。 这种方式，会让自己很有掌控感，多少事情来了，都不会乱了阵脚。 当然，在做计划的时候，你需要为高价值问题分配最多专门的时间。我此前特地写过一篇文章，就提到，大部分人在 80% 的时间里都是做无用功，根本原因就是没搞清楚真正要解决的问题。 ● 特征二，形成自己固定的时间习惯。 比如我的习惯是，在上午做需要烧脑的事情、在交通工具上听书、在饭后效率不高的时候集中回复微信消息和留言、在等人的时候构思下篇文章主题、在疲劳的时候刷一下公众号、在傍晚的时候跟团队开会、在晚上做一个简单总结。 这种习惯，一方面把不同难度的工作跟自己的效率波峰波谷相匹配，达到效率最大化；另一方面，我会清楚地知道，5 分钟、10 分钟、30 分钟，对我来说分别可以干什么，这样就不会一有碎片时间，就习惯性地刷朋友圈了。 ● 特征三，及时记录、每天总结。 当你正在工作的时候，老板布置了一个任务、客户又来了一个问题，你会如何呢？很多人就直接扑到临时任务上去了，但真正好的做法是，如果不是十万火急，你可以快速用关键词记在笔记本上，不需要任何思考，然后马上回到刚才的任务，做完再看笔记本。 另外，你在一天当中，学到了什么、犯了什么错误，当时也要记下来，因为过了那个时候，你很快就会忘，然后继续犯这个错误。当然，这些记录，晚上都需要进行整理。 我曾说过，此前 8 年多的顾问生涯里，成长最快的那半年，我每天都坚持写工作日记。 另外，记录还有一个好处，就是可以减轻大脑负担。每天的例行工作、自己常犯的错误，这些都可以列清单。你的大脑是用来思考的，是很宝贵的，别把一支笔就可以做的事情，强加给你的大脑来做。 问题 3：几乎从不“偷懒” “懒癌”是第一生产力。仔细盘点一下，我们哪样创新不是因为懒呢？不想走路，有了汽车；不想爬楼，有了电梯；不想打扫，有了扫地机器人…… 工作中的大部分事情，并不是一次性的，而是持续的，那么就可以在第一次做的时候，搭好框架。 比如，我让运营每周做一次数据分析，这个事情是重复性的，所以高效的做法是： 建一张 excel 表格，把固定需要分析的参数都做好公式，每周只需要把导出来的源数据贴进去，刷新之后参数就出来，然后只需要看参数来得出结论。 当然，这里所说的偷懒，不仅是善用工具，还包括善用他人。 比如，你从来没做过数据分析，那么就先去找找前人怎么做的；比如，你有自己的团队或者实习生，那就不要做任何他们就可以做的事情；再比如，去运营社群，摸索出一套群主激励机制，比你自己去做群主，要高效得多。 所以，这三个让你 Work Smart 的工作方式，听起来难吗？一点也不，而且你很可能也听说过。但是，为什么很多人做不到呢？我观察下来，有几个障碍： ● 障碍 1：工作环境所限。 很多人的工作性质，就不是结果导向型的，而是任务导向型的。他的工作岗位要求他做的，就是完成任务，至于背后的出发点，不需要知道。而且，领导有可能就是考核努力、考核苦劳，而不是考核产出。 实际上，工作性质对一个人的思维方式、行为习惯的影响，大到超乎想象。 你去看，刚毕业的时候，一个学校一个专业的同学，看起来差不多，但过了几年，你会发现，只要接触一个人几分钟，听他说几句话，就能大致判断出他的职业。 再极端一些的，多年前我曾经因为要帮客户设计流程，去他们的产线观察生产过程，在噪音极大、灯光昏暗的厂房里，我看着流水线工人机械地盯着机器、等待换箱，几个小时下来，我自己也开始反应迟钝、敏锐度下降了。 ● 障碍 2：没有资深的人辅导。 从开头的案例可以看出，Google 工程师那么优秀的一群人，在从校园进入公司之后，也需要有经验的人辅导。 但很多公司并不像 Google 那样，重视对新人工作方式的培养，将 Work Smart 提到非常高的位置。 他们往往只重视教员工 What （需要做哪些事情、用什么工具等等），却没有 How （如何聪明地做这些事情）和 Why （这些事情对公司、对客户有什么帮助、要达到何种目的），导致员工的聪明才干发挥不出来，没有成就感。 ● 障碍 3：思维方式固化。 一部分人，会在工作多年之后，发现工作性质和工作环境的负面影响，醒悟过来想要改变。 然而，从学校踏入社会的这几年，是思维和工作方式形成的关键几年，如果任务导向、应激式努力、闷头蛮干的工作方式在大脑中固化了，形成了下意识思维，是很难扭转过来的。 我带过几个人，此前的工作经历都是任务式、应激式的，在跟他们合作的时候，的确能够感受到他们与自己固有思维作斗争的痛苦与挣扎，然而，并不是每个人最终都能挣扎出来、突破自我的。 所以，年轻时候的工作选择，你选择的不只是一份工作，而是一种思维习惯、工作方式、价值观甚至生活方式。 在初入职场的几年，处于何种工作环境、跟谁一起工作、被谁辅导工作，足以影响你的下半辈子。","categories":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/categories/人生/"}],"tags":[{"name":"人生","slug":"人生","permalink":"http://wushuning.com/tags/人生/"}]},{"title":"mac中配置环境变量","slug":"mac中配置环境变量","date":"2016-12-05T16:00:00.000Z","updated":"2018-10-18T15:33:27.413Z","comments":true,"path":"2016/12/06/mac中配置环境变量/","link":"","permalink":"http://wushuning.com/2016/12/06/mac中配置环境变量/","excerpt":"","text":"mac修改环境变量修改当前用户环境变量以配置tomcat为例 打开终端：输入如下指令 1wangzhikuiMacBook-Pro:~ wangzhikui$ vi .bash_profile 编辑.bash_prifile文件 在英文输入下按i ，进入编辑状态输入如下 12345678910111213141516export PATH=/Users/wangzhikui/develop/tomcat8.0.39/bin:$PATH:export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_71.jdk/Contents/Homeexport CLASSPAHT=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$PATH:export PATH=/usr/local/mysql/bin:$PATH:export M2_HOME=/Users/wangzhikui/develop/apache-maven-3.3.9export PATH=$M2_HOME/bin:$PATH:export PATH=/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin:$PATH:export PATH~ ~ ~ ~ ~ ~ &quot;.bash_profile&quot; 9L, 465C 按esc键后 输入 :wq 保存退出 配置完后退出终端再打开即可在终端中直接输入tomcat的启动，停止命令","categories":[{"name":"mac","slug":"mac","permalink":"http://wushuning.com/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://wushuning.com/tags/mac/"}]},{"title":"个人日常网址","slug":"个人常用网址","date":"2015-12-31T16:00:00.000Z","updated":"2018-10-18T12:05:08.329Z","comments":true,"path":"2016/01/01/个人常用网址/","link":"","permalink":"http://wushuning.com/2016/01/01/个人常用网址/","excerpt":"","text":"前端koa koa中文 阿里egg vue react angular 2017 github starts nodejs web前端导航 hexo中文 后端importnew 后端源码 docker 社区gitbook github 掘金 开源中国 ibm segmentfault infoq 极客帮 iTeye CSDN 知乎 stackoverflow verycd 微博 豆瓣 鸟哥笔记 新榜 人人都是产品经理 develper-apple cocoachina swift 可视化datav 网易有数 百度sugar tableau 个人博客廖雪峰 阮一峰 线上教学慕课 网易公开课 传智播客 浪曦网 浪曦在线 极客学院 其他亚马逊 京东 12306 readfree 百度 小调网 爱奇艺 爱羽客 网速测试 在线作图 懒人图库 免费模版 8Isp空间 jhost yonyou用友友空间 UDN uapcloud 敏捷开发平台 云音jira 云音协作 git yonyou qiyeyun_gitbook 友云音文档","categories":[{"name":"前端","slug":"前端","permalink":"http://wushuning.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://wushuning.com/tags/前端/"}]},{"title":"oracle中批量执行sql时候，出现异常ArrayIndexOutOfBoundsException","slug":"oracle中批量执行sql时候，出现异常ArrayIndexOutOfBoundsException","date":"2015-03-16T16:00:00.000Z","updated":"2018-10-18T15:36:23.754Z","comments":true,"path":"2015/03/17/oracle中批量执行sql时候，出现异常ArrayIndexOutOfBoundsException/","link":"","permalink":"http://wushuning.com/2015/03/17/oracle中批量执行sql时候，出现异常ArrayIndexOutOfBoundsException/","excerpt":"","text":"问题说明使用jdbc接口PreparedStatement.executeBatch()向oracle中批量执行sql时候，出现异常ArrayIndexOutOfBoundsException，具体信息如下：12345 [java] view plaincopyprint?1. java.lang.ArrayIndexOutOfBoundsException: -32413 2. at oracle.jdbc.driver.OraclePreparedStatement.setupBindBuffers(OraclePreparedStatement.java:2672) 3. atoracle.jdbc.driver.OraclePreparedStatement.executeBatch(OraclePreparedStatement.java:10688) 4. atcom.keyi.xxx.dal.xx.importFile(PublicCustomerImportDao.java:107) 问题分析The 10g driver apparently keeps a global serialnumber for all parameters in the entire batch,with a “short”variable. So you can have at most 32768 parameters in the batch.I was havingthe same exception because I have a INSERT statement with 42 parameters and mybatchescan be as big as 1000 records, so 42000 &gt; 32768 and this overflowsto a negative index.I reduced the batch factor to 100 to be safe, and all iswell.I guess your update DML should have a larger number of parameters perrecord,right? (My diagnostic of the bug is just deduction from the symptoms) 网上查找原始帖子地址为：https://community.oracle.com/thread/599441?start=15&amp;tstart=0 大体的意思是，oracle的preparedStatement批量执行sql时，对参数个数是有上限的（针对不同版本的oracle驱动，这个上限对不同的可能是不同的）这个参数个数的含义指addBatch的次数每条sql中的参数个数。对于Oracle 10g的驱动来说，这个值可能是32768，所以编程时，addBatch的次数每条sql中的参数个数应该小于这个值，否则报错。 按照这个思路，将addBatch的数量减少，使每次executeBatch的参数值小于32768，发现异常解决。","categories":[{"name":"oracle","slug":"oracle","permalink":"http://wushuning.com/categories/oracle/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://wushuning.com/tags/oracle/"}]},{"title":"E440等预装Linux系统(或win8系统)改win7系统的心得","slug":"E440等预装Linux系统-或win8系统-改win7系统的心得","date":"2014-07-23T16:00:00.000Z","updated":"2018-10-18T15:21:38.383Z","comments":true,"path":"2014/07/24/E440等预装Linux系统-或win8系统-改win7系统的心得/","link":"","permalink":"http://wushuning.com/2014/07/24/E440等预装Linux系统-或win8系统-改win7系统的心得/","excerpt":"","text":"前几天刚入了一个E440，收到货开机才发现竟然是Linux版本的，只好自己动手更换系统，当中搜了不知多少帖子，从中午12点开始一直忙到22点，终于在最后看到了熟悉的win7登陆界面，特此分享，免得和我有一样情况的同学走歪路。当然最简单的方式是入一张win7的安装盘通过光驱安装，但苦于我没有任何安装光盘，所以使用了U盘安装的方式。PS:此方法同样适用于win8想更换成win7的用户 一、准备阶段1、一个4G大小的U盘 2、从网上下好你想要使用的win7系统（ghost版本亦可） 3、网上下好老毛桃版本的U盘制作器 4、网上下好分区工具diskgenius（注意一定要是专业版的，最好是绿色免安装版） 注：为了以免大家以为我是托或者有病毒，所以在此都不上链接，大家一般都可以通过百度第一页搜到 5、根据老毛桃的提示，把U盘制作成WINPE U盘启动器，并在U盘中拷入win7系统和dskgenius 6、下载好E440的驱动软件（联想thinkpad官方下载，至少把上网驱动下好） 7、记得以上所有软件如果初始状态时压缩包的话都必须解压完成（ISO系统除外） 二、BIOS阶段1、重启后按F1进入BIOS阶段 2、如果直接按F12通过U盘进WINPE系统，你会发现根本读不出硬盘，这是因为thinkpad的BIOS中设置成这样的， 我们需要对BIOS进行修改。具体步骤可以参见http://think.lenovo.com.cn/htmls/knowledge/detail_20131119161402965.html（联想官网，放心点击） 三、WINPE阶段1、根据上一步完成BIOS设置后，就可以重启并按F12进WINPE系统了。进去后系统直接提示你安装你放入U盘中的系统，别睬它，点击关闭。 2、还记得我让你拷进U盘中的diskgenius专业版么？拷进电脑硬盘中，并双击打开。在左边窗口点击硬盘，你会发现初始的硬盘只有一个分区，而且是GUID格式（简称GPT），而win7和win PE的默认方式是MBR，所以如果不对硬盘模式进行转换是无法安装win7的。点击硬盘，选择上面的“硬盘”——“转换分区表类型为MBR格式”，转换完成后，格式化整个硬盘，然后根据自己的需求快速分区（一般2个就够了，一个系统25G，另一个就是剩下的），最后点击“硬盘”——“重建主引导记录（MBR）（M）”。 3、以上步骤全部完成后，重启电脑，并重新进入WINPE，根据提示运行GHOST安装系统，完成后重启电脑（拔掉U盘吧，没用了）， 这个时候就会看到久违的win7系统启动图标。 四、WIN7阶段1、根据提示安装好可以安装的所有驱动，可能会发现上网驱动没有安装成功，还记得我在准备阶段让你们下载的上网驱动么？装好它你就可以上网了。 2、最后根据自己的需求安装软件，包括最新的补丁等等。 Enjoy it!","categories":[{"name":"系统","slug":"系统","permalink":"http://wushuning.com/categories/系统/"}],"tags":[{"name":"系统","slug":"系统","permalink":"http://wushuning.com/tags/系统/"}]},{"title":"设置Tomcat不用输入端口号和目录名就可以访问","slug":"设置Tomcat不用输入端口号和目录名就可以访问","date":"2011-12-31T16:00:00.000Z","updated":"2018-10-18T15:04:05.775Z","comments":true,"path":"2012/01/01/设置Tomcat不用输入端口号和目录名就可以访问/","link":"","permalink":"http://wushuning.com/2012/01/01/设置Tomcat不用输入端口号和目录名就可以访问/","excerpt":"","text":"情况一如果你的TOMCAT所在的机器纯粹就是只装TOMCAT作为JSP的服务器，那么将server.xml文件里的默认端口号由8080改为80即可。此时不用输入端口号也能正确访问，而且地址栏也不会出现端口号。 情况二如果你的TOMCAT所在机器除了装TOMCAT运行JSP外，还有IIS同时也运行ASP的话，那么这个8080端口屏蔽不了。有文章介绍可以将TOMCAT和IIS结合，可以去掉端口号，但是在这种情况下JSP里的SESSION不能用，跳到下页SESSION值就丢失了。故一个比较不得以的办法就是使用页面跳转。具体做法是:在IIS下建一站点，该站点对应你的网站的域名。该站点下就一个文件index.htm： &lt;script language=vbscript&gt; window.location.href=\"http://xxx.xxx.xxx.xxx:8080\" &lt;/script&gt; 则别人在访问你的域名时就不用输入端口号。而由系统自己跳转到TOMCAT。但此刻在地址栏会出现8080，但也只好如此了。","categories":[{"name":"tomcat","slug":"tomcat","permalink":"http://wushuning.com/categories/tomcat/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://wushuning.com/tags/tomcat/"}]}]}